#+TITLE: Differential equations assignment.
#+AUTHOR: Ivan Rybin gr.5
#+STARTUP: inlineimages

* Variant 14

Here is my variant:

$y' = (1 + y/x) ln((x + y)/x) + y / x$

$y_0 = 2, x_0 = 1$

* Math Solution

Let $y = x v$, then $y' = x v' + v$. So:

$x v' + v = (1 + v) ln(1 + v) + v$

$x v' = (1 + v) ln(1 + v)$

$\frac{dv}{dx} = (1 + v) ln(1 + v) / x$

$\int \frac{dv}{(1 + v) ln(1 + v)} = \int \frac{dx}{x}$

$ln(ln(1 + v)) = ln(x) + c_{1}$

$ln(1 + v) = x e ^ {c_{1}}$

$1 + v = e ^ {e ^ {c_{1}} x}$

$v = c_1 ^ x - 1$

$y = (c_1 ^ x - 1) x$

So we can count $c_1$:

$y_0 = 2, x_0 = 1$

$2 = (c_1 ^ 1 - 1) 1$

$2 = c_1 - 1$

$c_1 = 3$

The final answer is:

$y = (3 ^ x - 1) x$

* Code

** Link

My solution can be found at https://github.com/i1i1/Innopolis_DE_assignment.

** OOP and SOLID

#+CAPTION: Classes, their methods, and fields, and their relations
[[./img/classes_DE_assignment.png]]


#+CAPTION: Relation of packages
#+attr_html: :width 200px
#+attr_latex: :width 100px
[[./img/packages_DE_assignment.png]]


In my solution I tried to use OOP and SOLID principles. For example:
+ Single responsibility -- solution has 2 main classes ~Gui~ (which implements gui) and ~NumericalMethod~ (which is abstract class for making new numerical methods) which serve different purposes.
+ Open-closed principle -- all derived classes in solution just specify some details in abstract ones, but not modify them.
+ Liskov substitution -- in solution ~Gui.add_numericals~ method takes objects of different classes as long as they derived from ~NumericalMethod~.
+ Interface segregation -- ~NumericalMethod~ has 3 different specific functions for different tasks (graph above).
+ Dependency inversion -- specific numerical methods have to define only 1 function in order to work.

** About  ~main.py~

I tried to make a program what won't depend on my variant, that is why ~Exact~
is derived of ~ExactAbstract~, where user can implement only 3 functions in
order to run another initial value problem. Because of that ~main.py~ file has
only information which is needed to change variant, and it is only 24 lines of
code.

#+CAPTION: Implementation of my variant
#+BEGIN_SRC python
  class Exact(ExactAbstract):
      def derivative(x, y):
          return (1 + y/x) * m.log(1 + y/x) + y/x

      def exact(self, x):
          return (m.e ** (self.c * x) - 1) * x

      def set_constant(self, x0, y0):
          self.c = m.log(y0/x0 + 1) / x0
#+END_src

** Language choice and Euler method

Making program in python leaves even more space to work with. By using
some commands like ~eval~ and ~exec~ which let you interprete code from string,
there can be added functionality of specifying user-defined function from GUI.

Another great thing in design is that in order to create new numerical method user needs to
write only one function ~_next~ which would calculate next point:

#+CAPTION: Euler method implementation
#+BEGIN_SRC python
  class EulerMethod(NumericalMethod):
      name = "Euler"

      def _next(self, h, x0, y0):
          return y0 + h * self.der(x0, y0)
#+END_src

* Errors

#+CAPTION: Errors with step 9 steps
[[./img/errors_cmp1.png]]

#+CAPTION: Errors with step 65 steps
[[./img/errors_cmp2.png]]

As you can see on screenshots above you can see that local errors have some
expanential form while global error from some point becomes linear.

Errors are calculated inside ~NumericalMethod~ class.

#+CAPTION: Local error function
#+BEGIN_SRC python
  def get_lerr(self, x0, y0, X, h, exact):
      n = max(int((X-x0) // h), 2)
      x = np.linspace(x0, X, n)
      lerr = list()
      for i in range(1, n):
          y_num = self._next(h, x[i-1], exact(x[i-1]))
          y_exact = exact(x[i])
          lerr.append(abs(y_exact - y_num))
      return range(1, n), lerr
#+END_src

#+CAPTION: Global error function
#+BEGIN_SRC python
  def get_gerr(self, x0, y0, X, h, exact):
      n = max(int((X-x0) // h), 2)
      gerr = list()
      for i in range(2, n+1):
          x = np.linspace(x0, X, i)
          num = self.get_y(x, y0)
          ex = exact(x)
          gerr.append(abs(ex-num)[-1])
      return range(1, n), gerr
#+END_src

* Screenshots

#+CAPTION: Original view
#+attr_html: :width 800px
#+attr_latex: :width 400px
[[./img/screenshot1.png]]

#+CAPTION: Increasing ~X~
#+attr_html: :width 800px
#+attr_latex: :width 400px
[[./img/screenshot2.png]]

#+CAPTION: Removing Euler method
#+attr_html: :width 800px
#+attr_latex: :width 400px
[[./img/screenshot3.png]]
